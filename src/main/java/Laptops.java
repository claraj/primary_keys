import java.sql.*;
import java.util.Scanner;

/**
 * Created by clara on 11/10/16.
 * Simple example with primary keys that are generated as autoincrement values by the database
 */

public class Laptops {
    
    final static String LAPTOP_TABLE_NAME = "Laptops";
    final static String ID_COL = "id";
    final static String MANUFACTURER_COL = "manufacturer";
    final static String MODEL_COL = "model";
    
    static Scanner stringScanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        
        DBUtils.registerDriver();
        
        createTable();
        insertTestData();
        
        insertNewLaptop();
        findLaptopByModel();
        
        stringScanner.close();
        
    }
    
    
    private static void createTable() {
        
        try (Connection connection = DBUtils.getConnection();
             Statement createTableStatement = connection.createStatement()) {
            
            //The SQL to create the Laptop table is
            // CREATE TABLE IF NOT EXISTS Laptops (id INT NOT NULL AUTO_INCREMENT, manufacturer VARCHAR(100), model VARCHAR(100) PRIMARY KEY (id) )
            String createTableSQLtemplate = "CREATE TABLE IF NOT EXISTS %s (%s INT NOT NULL AUTO_INCREMENT, %s VARCHAR(100), %s VARCHAR(100), PRIMARY KEY (%s) )";
            String createTableSQL = String.format(createTableSQLtemplate, LAPTOP_TABLE_NAME, ID_COL, MANUFACTURER_COL, MODEL_COL, ID_COL);
            System.out.println("The SQL to be executed is: " + createTableSQL);
            
            createTableStatement.execute(createTableSQL);
            
            System.out.println("Created Laptop table");
            
            connection.close();
            createTableStatement.close();
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
        
    }
    
    /* Insert some example data */
    private static void insertTestData() {
        
        try (Connection connection = DBUtils.getConnection()) {
            
            // Example of the SQL to execute. The first value, the ID, is not needed - it will be generated by MySQL

            //   INSERT INTO Laptops VALUES ( 'HP', 'Pavilion 510' )
            //   INSERT INTO Laptops VALUES ( 'Apple', 'iMac 2016' )
            
            String insertSQL = String.format("INSERT INTO %s (%s, %s) VALUES ( ? , ? ) " , LAPTOP_TABLE_NAME, MANUFACTURER_COL, MODEL_COL);   // Don't need to provide a value for the primary key, the database will generate it for you
            System.out.println("Insert data - the statement to execute is " + insertSQL);

            PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL);

            //Add one row of test data
            insertTestDataStatement.setString(1, "HP");
            insertTestDataStatement.setString(2, "Pavilion 510");
            insertTestDataStatement.execute();

            insertTestDataStatement.setString(1, "Apple");
            insertTestDataStatement.setString(2, "iMac 2016");
            insertTestDataStatement.execute();

            insertTestDataStatement.close();
            connection.close();
            
            System.out.println("Added two rows of test data");
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    
    private static void insertNewLaptop() {

        System.out.println("Enter manufacturer of new Laptop");
        String manuf = stringScanner.nextLine();
        System.out.println("Enter model of new Laptop");
        String model = stringScanner.nextLine();
        
        try (Connection connection = DBUtils.getConnection()) {
            
            String insertSQL = String.format("INSERT INTO %s (%s, %s) VALUES ( ? , ?) ", LAPTOP_TABLE_NAME, MANUFACTURER_COL, MODEL_COL);     //Again, ID column value will be generated for us

            // If you'd like to fetch the auto-generated keys when rows are inserted, use this version.
            // Note the second argument, Statement.RETURN_GENERATED_KEYS, which requests the keys are saved in the PreparedStatement.
            PreparedStatement insertTestDataStatement = connection.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);
            
            insertTestDataStatement.setString(1, manuf);
            insertTestDataStatement.setString(2, model);
            insertTestDataStatement.execute();

            // Optional - what if you would like to know the key generated for the row that was just inserted?
            // Make sure you create the PreparedStatement with the Statement.RETURN_GENERATED_KEYS option set
            // And then calling the getGeneratedKeys() will return a ResultSet with the key(s) in. Only one row inserted, so just one in this example.
            // Note that it's possible to insert many rows in one query; hence many keys generated, so the return type must be a ResultSet.

            ResultSet pkResultSet = insertTestDataStatement.getGeneratedKeys();
            if (pkResultSet.next()) {
                int pk = pkResultSet.getInt(1);
                System.out.println("The laptop was added to the database and will have key " + pk);
            }


            System.out.println("Added new Laptop.");

            pkResultSet.close();
            insertTestDataStatement.close();
            connection.close();
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    
    //An example query. Could write other queries if desired.
    
    private static void findLaptopByModel() {
        
        System.out.println("Enter model name to search for in Laptop table");
        String modelToFind = stringScanner.nextLine();
        
        try (Connection connection = DBUtils.getConnection()) {
            
            String searchSQL = String.format("SELECT * FROM %s WHERE %s = ? " , LAPTOP_TABLE_NAME, MODEL_COL);
            PreparedStatement searchStatement = connection.prepareStatement(searchSQL);
            
            //Add one row of test data
            searchStatement.setString(1, modelToFind);
            
            ResultSet rs = searchStatement.executeQuery();
            
            System.out.println("Results of your query: ");
            while (rs.next()) {
                
                int id = rs.getInt(ID_COL);
                String manf = rs.getString(MANUFACTURER_COL);
                String model = rs.getString(MODEL_COL);
                
                System.out.println(String.format("id = %d Manufacturer = %s Model = %s", id, manf, model));
                
            }
            System.out.println("End of results");
            
            rs.close();
            searchStatement.close();
            connection.close();
            
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
}

